import { resolveIGuilds } from "../../index.js";
import { Method } from "./Method.js";
/**
 * @category Decorator
 */
export class DComponent extends Method {
    _type;
    _id;
    _guilds;
    _botIds;
    get type() {
        return this._type;
    }
    get botIds() {
        return this._botIds;
    }
    set botIds(value) {
        this._botIds = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get guilds() {
        return this._guilds;
    }
    set guilds(value) {
        this._guilds = value;
    }
    constructor(type, id, guilds, botIds) {
        super();
        this._type = type;
        this._id = id;
        this._guilds = guilds ?? [];
        this._botIds = botIds ?? [];
    }
    static create(type, id, guilds, botIds) {
        return new DComponent(type, id, guilds, botIds);
    }
    isBotAllowed(botId) {
        if (!this.botIds.length) {
            return true;
        }
        return this.botIds.includes(botId);
    }
    async getGuilds(client) {
        const guilds = await resolveIGuilds(client, this, [
            ...client.botGuilds,
            ...this.guilds,
        ]);
        return guilds;
    }
    async isGuildAllowed(client, guildId) {
        if (!guildId) {
            return true;
        }
        const guilds = await this.getGuilds(client);
        return guilds.includes(guildId);
    }
    isId(text) {
        return typeof this.id === "string" ? this.id === text : this.id.test(text);
    }
    parseParams() {
        return [];
    }
}
//# sourceMappingURL=DComponent.js.map